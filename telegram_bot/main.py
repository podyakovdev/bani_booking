# import re
import copy
import logging
import os
import sys
import time

import requests
from dotenv import load_dotenv
from telegram import (InlineKeyboardButton, InlineKeyboardMarkup,
                      InputMediaDocument, InputMediaPhoto, ParseMode, File)
from telegram.ext import (CallbackQueryHandler, CommandHandler,
                          ConversationHandler, Updater, MessageHandler,
                          Filters)

from constants import ABOUT_TEXT, CONTACTS_TEXT
from dashboard import dashboard, handle_start_date, get_analisys_by_date, show_analisys_by_date
from reservations import (get_clients_count, get_date, get_finish_hour,
                          get_gender, get_payment, get_start_hour,
                          save_payment)
from utils import (check_tokens, get_profile_data, get_reservations_history,
                   registration)

(MAIN, RESERVATION, DASHBOARD, BOT_DISPELL,
 CHOOSING_DATE, CHOOSING_END_DATE) = range(6)

RANKS = {
    0: "–ù–æ–≤–∏—á–æ–∫",
    6: "–†—è–¥–æ–≤–æ–π",
    20: "–û–ø—ã—Ç–Ω—ã–π",
    50: "–ì–≤–∞—Ä–¥–µ–µ—Ü",
    75: "–°—Ç–∞–ª–µ–≤–∞—Ä",
    100: "–ì–µ–Ω—Å–µ–∫",
}


BASE_KEYBOARD = [
    [
        InlineKeyboardButton("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å", callback_data="GET_GENDER"),
        InlineKeyboardButton("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="MY_PROFILE"),
    ],
    [InlineKeyboardButton("–ö–∞–±–∏–Ω–µ—Ç–Ω–∞—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∞, 2 —ç—Ç–∞–∂", callback_data="2_FLOOR")],
    [
        InlineKeyboardButton("–†—É—Å—Å–∫–∏–π —Å—Ç–∏–ª—å, 3 —ç—Ç–∞–∂", callback_data="3_FLOOR"),
    ],
    [
        InlineKeyboardButton("–í–∞–∂–Ω–æ–µ –æ –Ω–∞—Å", callback_data="ABOUT"),
        InlineKeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="CONTACTS"),
    ],
]


def start(update, _):
    """–ö–æ–º–∞–Ω–¥–∞ `/start`."""
    user = update.message.from_user
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name}-id{user.id} –Ω–∞—á–∞–ª —Ä–∞–∑–≥–æ–≤–æ—Ä")

    if user["is_bot"]:
        return BOT_DISPELL

    registration(user)

    keyboard = copy.deepcopy(BASE_KEYBOARD)

    if user.id in eval(os.getenv("ADMIN_IDs")):
        keyboard.append(
            [InlineKeyboardButton("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="DASHBOARD")]
        )

    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(
        text=f"{user.first_name}, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –≤ –ò–∑–º–∞–π–ª–æ–≤—Å–∫–∏—Ö –±–∞–Ω—è—Ö!\n"
        "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ –Ω–∞ –∂–µ–ª–∞–µ–º—ã–π —Å–µ–∞–Ω—Å.\n",
        reply_markup=reply_markup,
    )

    return MAIN


def start_over(update, _):
    """–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω—é –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–æ–≤."""
    query = update.callback_query
    query.answer()
    user = update.callback_query.message.chat

    keyboard = copy.deepcopy(BASE_KEYBOARD)

    if user.id in eval(os.getenv("ADMIN_IDs")):
        keyboard.append(
            [InlineKeyboardButton("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="DASHBOARD")]
        )

    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(
        text=f"{user.first_name}, "
        "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤ –ò–∑–º–∞–π–ª–æ–≤—Å–∫–∏—Ö –±–∞–Ω—è—Ö!\n"
        "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ"
        " –Ω–∞ –∂–µ–ª–∞–µ–º—ã–π —Å–µ–∞–Ω—Å.\n",
        reply_markup=reply_markup,
    )

    return MAIN


def my_profile(update, _):
    """–ü–æ–∫–∞–∑ –Ω–æ–≤–æ–≥–æ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫."""
    query = update.callback_query
    query.answer()
    user = update.callback_query.message.chat
    keyboard = [
        [
            InlineKeyboardButton(
                "–ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–µ—â–µ–Ω–∏–π", callback_data="RESERVATIONS_HISTORY"
            )
        ],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="START_OVER")],
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    profile_data, count = get_profile_data(user)
    rank = ""

    for hour_value in sorted(RANKS.keys()):
        if hour_value < count:
            rank = RANKS[hour_value]
        continue

    next_rank = ""
    hours_to_next_rank = 0

    for hour_value in sorted(RANKS.keys()):
        if hour_value > count:
            next_rank = RANKS[hour_value]
            hours_to_next_rank = hour_value - count
            break
    query.edit_message_text(
        text=f"–ù–æ–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}\n\n"
        f"–í—Å–µ–≥–æ —á–∞—Å–æ–≤ –Ω–∞–ø–∞—Ä–µ–Ω–æ: {count}\n"
        f"–ó–≤–∞–Ω–∏–µ: {rank}\n"
        f"–ß–∞—Å–æ–≤ –¥–æ –∑–≤–∞–Ω–∏—è <b>{next_rank}</b>: "
        f"{hours_to_next_rank}\n"
        f"{profile_data}",
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML,
    )
    return MAIN


def reservations_history(update, _):
    query = update.callback_query
    query.answer()
    user = update.callback_query.message.chat

    keyboard = [
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="MY_PROFILE")],
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    text = get_reservations_history(user)

    if text is None:
        text = "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø–æ–∫–∞ —É –Ω–∞—Å –Ω–µ –±—ã–ª–∏ üòî"
    query.edit_message_text(
        text="–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–æ—Å–µ—â–µ–Ω–∏–π:\n\n" + text,
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML,
        disable_web_page_preview=True,
    )

    return MAIN


def about(update, _):
    query = update.callback_query
    query.answer()

    keyboard = [
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="START_OVER")],
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(
        text=ABOUT_TEXT,
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML,
        disable_web_page_preview=True,
    )

    return MAIN


def contacts(update, _):
    """–ö–æ–Ω—Ç–∞–∫—Ç—ã."""
    query = update.callback_query
    query.answer()

    keyboard = [
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="START_OVER")],
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    query.edit_message_text(
        text=CONTACTS_TEXT,
        reply_markup=reply_markup,
        parse_mode=ParseMode.HTML,
        disable_web_page_preview=True,
    )

    return MAIN


def bot_dispell(update, _):
    pass


def second_floor(update, context):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat_id

    file_path1 = "images/2/26.jpg"
    file_path2 = "images/2/28.jpg"
    file_path3 = "images/2/31.jpg"
    file_path4 = "images/2/36.jpg"

    media_group = [
        InputMediaPhoto(media=open(file_path1, "rb"),
                        caption="–≠—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ç–æ?"),
        InputMediaPhoto(media=open(file_path2, "rb"),
                        caption="–≠—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ç–æ?"),
        InputMediaPhoto(media=open(file_path3, "rb"),
                        caption="–≠—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ç–æ?"),
        InputMediaPhoto(media=open(file_path4, "rb"),
                        caption="–≠—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ç–æ?"),
    ]

    keyboard = [
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="START_OVER")],
    ]

    text = (
        "–ë–æ–ª–µ–µ –≤–º–µ—Å—Ç–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ª –∏–∑ –¥–≤—É—Ö, –∫–æ—Ç–æ—Ä—ã–º–∏ —Ä–∞—Å–ø–æ–ª–∞–≥–∞—é—Ç"
        "–ò–∑–º–∞–π–ª–æ–≤—Å–∫–∏–µ –±–∞–Ω–∏, —Ä–∞—Å—Å—á–∏—Ç–∞–Ω –Ω–∞ 36 –º–µ—Å—Ç, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω "
        "–Ω–∞ 2 —ç—Ç–∞–∂–µ, –≤ –ø—Ä–∞–≤–æ–º –∫—Ä—ã–ª–µ –∑–¥–∞–Ω–∏—è.\n\n"
        "–ü–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º –≤ —Ä–∞–∑—Ä—è–¥ –∏–º–µ–µ—Ç—Å—è –±–∞—Ä-–±—É—Ñ–µ—Ç –∏ –ø—Ä–æ—Å—Ç–æ—Ä–Ω—ã–π"
        " –∑–∞–ª —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å—Ç–æ–ª–∞–º–∏. –†–∞–∑–¥–µ–≤–∞–ª–∫–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ "
        "–±–æ–ª—å—à–∏—Ö –∫–∞–±–∏–Ω–æ–∫ —Å –±—Ä–µ–≤–µ–Ω—á–∞—Ç—ã–º–∏ –ø–µ—Ä–µ–≥–æ—Ä–æ–¥–∫–∞–º–∏, "
        "–∫–∞–∂–¥–∞—è –Ω–∞ 6 —á–µ–ª–æ–≤–µ–∫. –í—Å–µ –æ—Ç–¥–µ–ª–∞–Ω–æ –¥–µ—Ä–µ–≤–æ–º –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç "
        "–ø—Ä–∏—è—Ç–Ω–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ –≤—Å–µ —Ç–æ–π –∂–µ –¥–æ–±—Ä–æ—Ç–Ω–æ—Å—Ç–∏. –ó–∞ –∫–æ–º–Ω–∞—Ç–æ–π"
        " –æ—Ç–¥—ã—Ö–∞ —Å–ª–µ–¥—É–µ—Ç –ø–æ–º—ã–≤–æ—á–Ω—ã–π –∑–∞–ª, —Å —Ç–µ–ø–ª—ã–º–∏ —Å–∫–∞–º–µ–π–∫–∞–º–∏ –∏–∑ –º—Ä–∞–º–æ—Ä–∞, "
        "–¥—É—à–µ–≤—ã–º–∏ –∫–∞–±–∏–Ω–∞–º–∏ –∏ –∫—É–ø–µ–ª—å—é —Å –ª–µ–¥—è–Ω–æ–π –≤–æ–¥–æ–π.\n\n"
        "–ó–∞ –º–æ–µ—á–Ω—ã–º –ø–æ–º–µ—â–µ–Ω–∏–µ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–µ—Ä–¥—Ü–µ –±–∞–Ω–∏ - –ø–∞—Ä–∏–ª–∫–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π "
        "–ø–æ—Å—Ç—Ä–æ–µ–Ω–∞ –ø—Ä–µ–∫—Ä–∞—Å–Ω–∞—è –∫–∞–º–µ–Ω–Ω–∞—è –ø–µ—á—å, —Ä–∞–∑–º–µ—Ä–æ–º –æ—Ç –ø–æ–ª–∞ –¥–æ "
        "–ø–æ—Ç–æ–ª–∫–∞. –í –ø–∞—Ä–Ω–æ–π —Ü–∞—Ä—è—Ç –∞—Ä–æ–º–∞—Ç—ã –∞–≤—Å—Ç—Ä–∞–ª–∏–π—Å–∫–æ–≥–æ —ç–≤–∫–∞–ª–∏–ø—Ç–∞, "
        "–∏ —Ä—É—Å—Å–∫–æ–π –ø–∏—Ö—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–∞—Ä—è—Ç –í–∞–º —Å–∞–º—ã–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —ç–º–æ—Ü–∏–∏!"
        "–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –í–∞—Å –ª–∏—á–Ω–æ –ø–æ—Å–µ—Ç–∏—Ç—å –Ω–∞—à—É –±–∞–Ω—é, —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é "
        "–ø–æ–¥ —Ä—É—Å—Å–∫—É—é –∏–∑–±—É, –∏ —É–∫—Ä–∞—à–µ–Ω–Ω—É—é —Ö–æ—Ö–ª–æ–º—Å–∫–æ–π —Ä–æ—Å–ø–∏—Å—å—é.\n\n"
        "–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Å–µ—â–µ–Ω–∏—è 600 —Ä—É–±–ª–µ–π –∑–∞ —á–∞—Å."
    )
    reply_markup = InlineKeyboardMarkup(keyboard)

    context.bot.send_media_group(chat_id=chat_id, media=media_group)
    context.bot.send_message(
        chat_id=chat_id, text=text, reply_markup=reply_markup,
        parse_mode="Markdown"
    )

    return MAIN


def third_floor(update, context):
    query = update.callback_query
    query.answer()
    chat_id = query.message.chat_id

    file_path1 = "images/3/10.jpg"
    file_path2 = "images/3/22.jpg"

    media_group = [
        InputMediaPhoto(media=open(file_path1, "rb"),
                        caption="–≠—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ç–æ?"),
        InputMediaPhoto(media=open(file_path2, "rb"),
                        caption="–≠—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ—Ç–æ?"),
    ]

    keyboard = [
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="START_OVER")],
    ]

    text = (
        "–≠—Ç–æ –ø—Ä–µ—Å—Ç–∏–∂–Ω—ã–π –Ω–µ–±–æ–ª—å—à–æ–π —Ä–∞–∑—Ä—è–¥, –≥–¥–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ"
        " —Ä–∞–∑–º–µ—â–∞–µ—Ç—Å—è –¥–æ 23 —á–µ–ª–æ–≤–µ–∫. –ó–∞–ª —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –Ω–∞ 3-–º "
        "—ç—Ç–∞–∂–µ, –≤ –ª–µ–≤–æ–º –∫—Ä—ã–ª–µ –∑–¥–∞–Ω–∏—è.\n\n"
        "–ü–æ–º–µ—â–µ–Ω–∏–µ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ç—Ä–µ—Ö —É—é—Ç–Ω—ã—Ö –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–∞–±–∏–Ω–µ—Ç–æ–≤ "
        "–Ω–∞ 10, 6, –∏ 5 —á–µ–ª–æ–≤–µ–∫.\n\n"
        "–í –¥–∞–Ω–Ω–æ–º —Ä–∞–∑—Ä—è–¥–µ –Ω–µ–±–æ–ª—å—à–∞—è –ø–∞—Ä–Ω–∞—è —Å –æ—Ç–ª–∏—á–Ω—ã–º –ø–∞—Ä–æ–º, "
        "–≤—Å–µ–≥–¥–∞ –Ω–∞–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –∞—Ä–æ–º–∞—Ç–∞–º–∏ –ø–æ–ª—ã–Ω–∏, –º—è—Ç—ã –∏ –¥–æ–Ω–Ω–∏–∫–∞, –º—ã–ª—å–Ω—è "
        "—Å —Ç–µ–ø–ª—ã–º–∏ —Å–∫–∞–º–µ–π–∫–∞–º–∏ –∏–∑ –º—Ä–∞–º–æ—Ä–∞ –∏ –¥—É—à–µ–≤—ã–º–∏ –∫–∞–±–∏–Ω–∞–º–∏; –∫—É–ø–µ–ª—å —Å "
        "–ª–µ–¥—è–Ω–æ–π –≤–æ–¥–æ–π.\n\n–¢–∞–∫ –∂–µ –¥–ª—è –í–∞—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –±–∞—Ä, –≥–¥–µ –≤—Å–µ–≥–¥–∞ –∏–º–µ–µ—Ç—Å—è"
        " –±–æ–ª—å—à–æ–π –≤—ã–±–æ—Ä —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–∞–∫—É—Å–æ–∫, –ø—Ä–æ—Ö–ª–∞–¥–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤, "
        "–≥–æ—Ä—è—á–∏–π —á–∞–π. –ó–¥–µ—Å—å –≤—Å–µ–≥–¥–∞ —Ü–∞—Ä—è—Ç –∫–æ–º—Ñ–æ—Ä—Ç –∏ "
        "–¥—É—à–µ–≤–Ω–∞—è –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∞.\n\n"
        "–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Å–µ—â–µ–Ω–∏—è 750 —Ä—É–±–ª–µ–π –∑–∞ —á–∞—Å."
    )
    reply_markup = InlineKeyboardMarkup(keyboard)

    context.bot.send_media_group(chat_id=chat_id, media=media_group)
    context.bot.send_message(
        chat_id=chat_id,
        text=text,
        reply_markup=reply_markup,
        parse_mode="Markdown",
    )

    return MAIN


if __name__ == "__main__":

    logging.basicConfig(
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        level=logging.INFO,
    )
    logger = logging.getLogger(__name__)

    dotenv_path = os.path.join(os.path.dirname(__file__), ".env")
    if not os.path.exists(dotenv_path):
        logger.critical("–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª .env")
    load_dotenv(dotenv_path)

    if not check_tokens(os.getenv("TELEGRAM_TOKEN")):
        logger.critical("–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –≤ .env")
        sys.exit()

    API_URL = os.getenv('API_URL')
    updater = Updater(os.getenv("TELEGRAM_TOKEN"))
    dispatcher = updater.dispatcher

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            MAIN: [
                CallbackQueryHandler(my_profile, pattern="MY_PROFILE"),
                CallbackQueryHandler(about, pattern="ABOUT"),
                CallbackQueryHandler(start_over, pattern="START_OVER"),
                CallbackQueryHandler(contacts, pattern="CONTACTS"),
                CallbackQueryHandler(get_gender, pattern="GET_GENDER"),
                CallbackQueryHandler(dashboard, pattern="DASHBOARD"),
                CallbackQueryHandler(second_floor, pattern="2_FLOOR"),
                CallbackQueryHandler(third_floor, pattern="3_FLOOR"),
                CallbackQueryHandler(
                    reservations_history, pattern="RESERVATIONS_HISTORY"
                ),
            ],
            RESERVATION: [
                CallbackQueryHandler(get_date, pattern=r"^GENDER:"),
                CallbackQueryHandler(get_clients_count, pattern=r"^DATE:"),
                CallbackQueryHandler(get_start_hour, pattern=r"^COUNT:"),
                CallbackQueryHandler(get_finish_hour, pattern=r"^START_HOUR:"),
                CallbackQueryHandler(get_payment, pattern=r"^FINISH_HOUR:"),
                CallbackQueryHandler(save_payment, pattern=r"PAYMENT:"),
                CallbackQueryHandler(start_over, pattern="START_OVER"),
            ],
            BOT_DISPELL: [
                CallbackQueryHandler(bot_dispell, pattern="BOT_DISPELL"),
            ],
            DASHBOARD: [
                CallbackQueryHandler(start_over, pattern="START_OVER"),
                CallbackQueryHandler(get_analisys_by_date,
                                     pattern="ANALISYS_BY_DATE"),
            ],
            CHOOSING_DATE: [
                MessageHandler(Filters.text & ~Filters.command,
                               handle_start_date),
                CallbackQueryHandler(dashboard, pattern="DASHBOARD")],
            CHOOSING_END_DATE: [
                MessageHandler(Filters.text & ~Filters.command,
                               show_analisys_by_date),
                CallbackQueryHandler(dashboard, pattern="DASHBOARD"),]
        },
        fallbacks=[CommandHandler("start", start)],
    )
    dispatcher.add_handler(conv_handler)

    updater.start_polling()
    updater.idle()
